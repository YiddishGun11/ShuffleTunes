{"version":3,"file":"static/js/655.e35c7831.chunk.js","mappings":"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","sources":["scripts/salt.js","components/Connexion/Connexion.js","components/Inscription/Inscription.js","pages/Connexion/ConnexionPage.js"],"sourcesContent":["export const salt = \"8b082695d253378d7f3b9032a2304c15afff144686365dddefd1a32582a249c98d7d55131323d741a5cdd509ef7758051caa849c4494c831d996c23b250d46a2\"\r\n\r\n\r\n","import { useRef } from 'react';\r\nimport './Connexion.css';\r\nimport axios from 'axios';\r\nimport {URL} from '../../scripts/url'\r\nimport {NotificationContainer, NotificationManager} from 'react-notifications';\r\nimport {sha512} from 'js-sha512'\r\nimport {salt} from '../../scripts/salt'\r\n\r\nfunction Connexion({setDisplay}){\r\n\r\n    const pseudo = useRef(null);\r\n    const password = useRef(null);\r\n\r\n    function onSubmit (event) {\r\n        event.preventDefault();\r\n\r\n        if(pseudo.current.value && password.current.value) {\r\n            const data = {\r\n                'pseudo' : pseudo.current.value,\r\n                'password' : sha512(`${password.current.value}${salt}`)\r\n            }\r\n            axios.post(`${URL}/login`, data, {\r\n                withCredentials: true,\r\n            })\r\n            .then(() => {\r\n                NotificationManager.success('You are now logged in', 'Successfull login');\r\n                return window.location = \"/dashboard\";\r\n            })\r\n            .catch(error => {\r\n                if (error.response) {\r\n                    return NotificationManager.error(error.response.data,  'A problem occured');\r\n                }\r\n                console.log(error)\r\n                return NotificationManager.error('Something went wrong, try again later', 'Unexpected error');\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    return(\r\n        <div className='login-section-background'>\r\n            <NotificationContainer/>\r\n            <div className='login-section'>\r\n                <h1>ShuffleTunes</h1>\r\n                <p className='login-section-subtitle'> Enhance your musical experience </p>\r\n                <form onSubmit={onSubmit}>\r\n                    <input type=\"text\" placeholder='Pseudo' required minLength={5} maxLength={20} ref={pseudo}></input>\r\n                    <input type=\"password\" placeholder='Password' required minLength={8} maxLength={64} ref={password}></input>\r\n                    <button type='submit'>Login</button>\r\n                </form>\r\n                <div className='switch-connect'>\r\n                    <p>new member ?</p>\r\n                    <button onClick={()=>setDisplay(false)} className=\"switch-connect-link\">register</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Connexion;","import React, { useRef, useState } from 'react'\r\nimport axios from 'axios';\r\nimport {URL} from '../../scripts/url'\r\nimport {sha512} from 'js-sha512'\r\nimport {salt} from '../../scripts/salt'\r\n\r\nimport {NotificationContainer, NotificationManager} from 'react-notifications';\r\nimport 'react-notifications/lib/notifications.css';\r\n\r\nimport ReCAPTCHA from \"react-google-recaptcha\";\r\n\r\nimport { zxcvbn, zxcvbnOptions } from '@zxcvbn-ts/core'\r\nimport zxcvbnCommonPackage from '@zxcvbn-ts/language-common'\r\nimport zxcvbnEnPackage from '@zxcvbn-ts/language-en'\r\n\r\nfunction Inscription ({setDisplay}) {\r\n\r\n    // Save form input\r\n    const pseudo = useRef(null);\r\n    const password = useRef(null);\r\n    const confirmPassword = useRef(null);\r\n    const [warningMessage, setWarningMessage] = useState(null);\r\n    const recaptchaRef = useRef(null);\r\n\r\n    const publicCaptchaKey = \"6LckQG0jAAAAAG2GkOggnTpG0ZfKGJXWowpmFC9E\";\r\n    \r\n    // Setup password review\r\n    const passwordReviewOptions = {\r\n        translations: zxcvbnEnPackage.translations,\r\n        graphs: zxcvbnCommonPackage.adjacencyGraphs,\r\n        dictionary: {\r\n          ...zxcvbnCommonPackage.dictionary,\r\n          ...zxcvbnEnPackage.dictionary,\r\n        }\r\n    }\r\n\r\n    zxcvbnOptions.setOptions(passwordReviewOptions);\r\n\r\n    function reviewPassword () {\r\n        setWarningMessage(zxcvbn(password.current.value).feedback.warning);\r\n    }\r\n\r\n    // Check if password and confirm password match\r\n    function onConfirmPasswordInputChange (event) {\r\n        if (confirmPassword.current.value === password.current.value) {\r\n            return event.target.setCustomValidity(\"\");\r\n        }\r\n        return event.target.setCustomValidity(\"Password and confirm password don't match\");\r\n    }\r\n\r\n    async function onSubmit (event) {\r\n        event.preventDefault();\r\n\r\n        if(pseudo.current.value && password.current.value) {\r\n\r\n            const token = await recaptchaRef.current.executeAsync();\r\n            recaptchaRef.current.reset();\r\n\r\n            const data = {\r\n                'pseudo' : pseudo.current.value,\r\n                'password' : sha512(`${password.current.value}${salt}`),\r\n                'token' : token\r\n            }\r\n            axios.post(`${URL}/register`, data)\r\n            .then(event => {\r\n                return NotificationManager.success(event.data, 'Successfull register');\r\n            })\r\n            .catch(error => {\r\n                if (error.response) {\r\n                    return NotificationManager.error(error.response.data,  'A problem occured');\r\n                }\r\n\r\n                return NotificationManager.error('Something went wrong, try again later', 'Unexpected error');\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <NotificationContainer className={'notifContainer'}/>\r\n            <div className='login-section-background'>\r\n                <div className='login-section'>\r\n                    <h1>ShuffleTunes</h1>\r\n                    <p className='login-section-subtitle'>Enhance your musical experience</p>\r\n                    <form onSubmit={onSubmit}>\r\n                        <input type=\"text\" placeholder='Pseudo' ref={pseudo} required minLength={5} maxLength={20}></input>\r\n                        <input type=\"password\" placeholder='Password' ref={password} onChange={reviewPassword} required minLength={8} maxLength={64}></input>\r\n                        <p className='passwordReview'>{warningMessage}</p>\r\n                        <input type=\"password\" placeholder='Confirm password' ref={confirmPassword} onChange={onConfirmPasswordInputChange} required minLength={8} maxLength={64}></input>\r\n                        <ReCAPTCHA ref={recaptchaRef} sitekey={publicCaptchaKey} size='invisible'/>\r\n                        <button type='sumbit'>Register</button>\r\n                    </form>\r\n                    <div className='switch-connect'>\r\n                        <p>already member ?</p>\r\n                        <button onClick={()=>setDisplay(true)}className=\"switch-connect-link\">login</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Inscription;","import React, {useState} from 'react'\r\nimport './ConnexionPage.scss'\r\nimport {Link} from 'react-router-dom'\r\nimport Connexion from '../../components/Connexion/Connexion'\r\nimport Inscription from '../../components/Inscription/Inscription';\r\n\r\nfunction ConnexionPage(){\r\n\r\n    const[display, setDisplay] = useState(true);\r\n\r\n    return(\r\n        <div className='connexion-section'>\r\n            <div className='home-menu'>\r\n                <Link to=\"/\" className='home-menu-logo'><p>ShuffleTunes</p></Link>\r\n                <Link to=\"/connexion\" className='home-menu-link'><p>Login</p></Link>\r\n            </div>\r\n            {display?(\r\n                <Connexion display={display} setDisplay={setDisplay}/>\r\n            ):(\r\n                <Inscription display={display} setDisplay={setDisplay} />\r\n            )}\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default ConnexionPage;"],"names":["salt","setDisplay","pseudo","useRef","password","className","onSubmit","event","preventDefault","current","value","data","sha512","axios","URL","withCredentials","then","NotificationManager","window","location","catch","error","response","console","log","type","placeholder","required","minLength","maxLength","ref","onClick","confirmPassword","useState","warningMessage","setWarningMessage","recaptchaRef","passwordReviewOptions","translations","zxcvbnEnPackage","graphs","zxcvbnCommonPackage","dictionary","executeAsync","token","reset","zxcvbnOptions","onChange","zxcvbn","feedback","warning","target","setCustomValidity","sitekey","size","display","to"],"sourceRoot":""}