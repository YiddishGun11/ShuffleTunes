{"version":3,"file":"static/js/214.1dc3448e.chunk.js","mappings":"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","sources":["components/Connexion/Connexion.js","components/Inscription/Inscription.js","pages/Connexion/ConnexionPage.js","scripts/url.js"],"sourcesContent":["import './Connexion.css'\r\n\r\nfunction Connexion({setDisplay}){\r\n\r\n    return(\r\n        <div className='login-section-background'>\r\n            <div className='login-section'>\r\n                <h1>ShuffleTunes</h1>\r\n                <p className='login-section-subtitle'>Augmenter votre expérience musicale</p>\r\n                <input type=\"text\" placeholder='Pseudo'></input>\r\n                <input type=\"text\" placeholder='Mot de passe'></input>\r\n                <button>Se connecter</button>\r\n                <div className='switch-connect'>\r\n                    <p>pas encore membre ?</p>\r\n                    <p onClick={()=>setDisplay(false)} className=\"switch-connect-link\">s'inscrire</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Connexion;","import React, { useRef, useState } from 'react'\r\nimport axios from 'axios';\r\nimport {URL} from '../../scripts/url'\r\n\r\nimport {NotificationContainer, NotificationManager} from 'react-notifications';\r\nimport 'react-notifications/lib/notifications.css';\r\n\r\nimport { zxcvbn, zxcvbnOptions } from '@zxcvbn-ts/core'\r\nimport zxcvbnCommonPackage from '@zxcvbn-ts/language-common'\r\nimport zxcvbnEnPackage from '@zxcvbn-ts/language-en'\r\n\r\nfunction Inscription ({setDisplay}) {\r\n\r\n    // Save form input\r\n    const pseudo = useRef(null);\r\n    const password = useRef(null);\r\n    const confirmPassword = useRef(null);\r\n    const [warningMessage, setWarningMessage] = useState(null);\r\n\r\n    // Setup password review\r\n    const passwordReviewOptions = {\r\n        translations: zxcvbnEnPackage.translations,\r\n        graphs: zxcvbnCommonPackage.adjacencyGraphs,\r\n        dictionary: {\r\n          ...zxcvbnCommonPackage.dictionary,\r\n          ...zxcvbnEnPackage.dictionary,\r\n        }\r\n    }\r\n\r\n    zxcvbnOptions.setOptions(passwordReviewOptions);\r\n\r\n    function reviewPassword () {\r\n        setWarningMessage(zxcvbn(password.current.value).feedback.warning);\r\n    }\r\n\r\n    // Check if password and confirm password match\r\n    function onConfirmPasswordInputChange (event) {\r\n        if (confirmPassword.current.value === password.current.value) {\r\n            return event.target.setCustomValidity(\"\");\r\n        }\r\n        return event.target.setCustomValidity(\"Password and confirm password don't match\");\r\n    }\r\n\r\n    // Notification manager\r\n    function manageNotification (type, message, title=null, timeout=5000) {\r\n        switch (type) {\r\n            case 'succes' : \r\n                NotificationManager.success(message, title, timeout);\r\n                break;\r\n                \r\n            case 'error' : \r\n                NotificationManager.error(message,title, timeout);\r\n                break;\r\n            \r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    function onSubmit (event) {\r\n        event.preventDefault();\r\n        \r\n        if(pseudo.length && password.length) {\r\n            const data = {\r\n                'pseudo' : pseudo.current.value,\r\n                'password' : password.current.value\r\n            }\r\n            axios.post(`${URL}/register`, data)\r\n            .then(event => {\r\n                if (event.data.errors) {\r\n                    return manageNotification('error', event.data.errors, 'A problem occured');\r\n                }\r\n                \r\n                if (event.data.success) {\r\n                    return manageNotification('succes', event.data.success);\r\n                }\r\n            })\r\n            .catch(event => {\r\n                console.log(event);\r\n                if (event.response.data) {\r\n                    event.response.data.errors.forEach(element => {\r\n                        return manageNotification('error', element.msg, 'A problem occured');\r\n                    });\r\n                }\r\n                return manageNotification('error', 'Something went wrong, try again later', 'Unexpected error');\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <NotificationContainer className={'notifContainer'}/>\r\n            <div className='login-section-background'>\r\n                <div className='login-section'>\r\n                    <h1>ShuffleTunes</h1>\r\n                    <p className='login-section-subtitle'>Enhance your musical experience</p>\r\n                    <form onSubmit={onSubmit}>\r\n                        <input type=\"text\" placeholder='Pseudo' ref={pseudo} required minLength={5} maxLength={20}></input>\r\n                        <input type=\"password\" placeholder='Password' ref={password} onChange={reviewPassword} required minLength={8} maxLength={64}></input>\r\n                        <p className='passwordReview'>{warningMessage}</p>\r\n                        <input type=\"password\" placeholder='Confirm password' ref={confirmPassword} onChange={onConfirmPasswordInputChange} required minLength={8} maxLength={64}></input>\r\n                        <button type='sumbit'>Register</button>\r\n                    </form>\r\n                    <div className='switch-connect'>\r\n                        <p>already member ?</p>\r\n                        <p onClick={()=>setDisplay(true)}className=\"switch-connect-link\">login</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Inscription;","import React, {useState} from 'react'\r\nimport './ConnexionPage.scss'\r\nimport {Link} from 'react-router-dom'\r\nimport Connexion from '../../components/Connexion/Connexion'\r\nimport Inscription from '../../components/Inscription/Inscription';\r\n\r\nfunction ConnexionPage(){\r\n\r\n    const[display, setDisplay] = useState(true);\r\n\r\n    return(\r\n        <div className='connexion-section'>\r\n            <div className='home-menu'>\r\n                <Link to=\"/\" className='home-menu-logo'><p>ShuffleTunes</p></Link>\r\n                <Link to=\"/connexion\" className='home-menu-link'><p>Login</p></Link>\r\n            </div>\r\n            {display?(\r\n                <Connexion display={display} setDisplay={setDisplay}/>\r\n            ):(\r\n                <Inscription display={display} setDisplay={setDisplay} />\r\n            )}\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default ConnexionPage;","//ce fichier reprend la liste des variables globales utilisées dans l'application Web\r\n\r\n\r\nexport const URL = 'http://localhost:5000' ;"],"names":["setDisplay","className","type","placeholder","onClick","pseudo","useRef","password","confirmPassword","useState","warningMessage","setWarningMessage","passwordReviewOptions","translations","zxcvbnEnPackage","graphs","zxcvbnCommonPackage","dictionary","manageNotification","message","title","timeout","NotificationManager","zxcvbnOptions","onSubmit","event","preventDefault","length","data","current","value","axios","URL","then","errors","success","catch","console","log","response","forEach","element","msg","ref","required","minLength","maxLength","onChange","zxcvbn","feedback","warning","target","setCustomValidity","display","to"],"sourceRoot":""}